HTML:



<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Weather App</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div class="weather-app">
        <h1>Weather App</h1>
        <input type="text" id="cityInput" placeholder="Enter city name">
        <button id="getWeatherBtn">Get Weather</button>
        
        <div id="weatherDetails" class="hidden">
            <h2 id="cityName"></h2>
            <div class="weather-info">
                <p>Temperature: <span id="temperature"></span>Â°C</p>
                <p>Humidity: <span id="humidity"></span>%</p>
                <p>Conditions: <span id="conditions"></span></p>
            </div>
        </div>

        <div id="errorMsg" class="error hidden">City not found. Please try again.</div>
    </div>

    <script>
        // API Key from OpenWeatherMap (replace with your API key)
const apiKey = 'a04a5fb15ea84712c76764009ad33dbf';

// Selecting HTML elements
const cityInput = document.getElementById('cityInput');
const getWeatherBtn = document.getElementById('getWeatherBtn');
const weatherDetails = document.getElementById('weatherDetails');
const cityName = document.getElementById('cityName');
const temperature = document.getElementById('temperature');
const humidity = document.getElementById('humidity');
const conditions = document.getElementById('conditions');
const errorMsg = document.getElementById('errorMsg');

// Event listener for button click
getWeatherBtn.addEventListener('click', () => {
    const city = cityInput.value;
    if (city) {
        getWeather(city);
    } else {
        alert("Please enter a city name");
    }
});

// Function to fetch weather data
function getWeather(city) {
    const apiUrl = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}&units=metric`;

    fetch(apiUrl)
        .then(response => {
            if (!response.ok) {
                throw new Error('City not found');
            }
            return response.json();
        })
        .then(data => {
            // Update the UI with weather data
            cityName.innerText = data.name;
            temperature.innerText = data.main.temp;
            humidity.innerText = data.main.humidity;
            conditions.innerText = data.weather[0].description;
            
            weatherDetails.classList.remove('hidden');
            errorMsg.classList.add('hidden');

            // Change background based on weather conditions
            updateBackground(data.weather[0].main);
        })
        .catch(error => {
            weatherDetails.classList.add('hidden');
            errorMsg.classList.remove('hidden');
        });
}

// Function to update background based on weather
function updateBackground(weatherCondition) {
    switch(weatherCondition.toLowerCase()) {
        case 'clear':
            document.body.style.background = "linear-gradient(135deg, #FFD194 0%, #D1913C 100%)";
            break;
        case 'clouds':
            document.body.style.background = "linear-gradient(135deg, #757F9A 0%, #D7DDE8 100%)";
            break;
        case 'rain':
            document.body.style.background = "linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%)";
            break;
        case 'snow':
            document.body.style.background = "linear-gradient(135deg, #E8CBC0 0%, #636FA4 100%)";
            break;
        default:
            document.body.style.background = "linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%)";
    }
}

    </script>
</body>
</html>






CSS:


body {
    font-family: Arial, sans-serif;
    display: flex;
    justify-content: center;
    align-items: center;
    height: 100vh;
    margin: 0;
    background: linear-gradient(135deg, #74ebd5 0%, #ACB6E5 100%);
}

.weather-app {
    background-color: rgba(255, 255, 255, 0.9);
    padding: 20px;
    border-radius: 8px;
    text-align: center;
    width: 300px;
    box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
}

h1 {
    margin: 0;
    font-size: 24px;
}

input {
    padding: 10px;
    border: 2px solid #ddd;
    border-radius: 4px;
    margin-bottom: 10px;
    width: 100%;
    font-size: 16px;
}

button {
    padding: 10px;
    background-color: #5DADE2;
    color: white;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    width: 100%;
}

button:hover {
    background-color: #3498DB;
}

.weather-info {
    margin-top: 10px;
}

.weather-info p {
    margin: 5px 0;
}

#errorMsg {
    color: red;
    font-weight: bold;
}

.hidden {
    display: none;
}
